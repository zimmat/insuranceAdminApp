{"version":3,"sources":["../src/schema.js"],"names":["MONGO_URL","mongo","connect","Products","productId","productName","coverAmount","monthlyPremium","Policies","policyId","policyNumber","contactNo","startDate","policyType","name","fields","type","productType","policies","resolve","getProducts","addProduct","description","args","root","newProduct","PRODUCT","push","QueryType","products","MutationType","add","module","exports","query","mutation"],"mappings":"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","file":"schema.js","sourcesContent":["import {\n  graphql,\n  GraphQLID,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLDate,\n  GraphQLList,\n  GraphQLSchema\n} from 'graphql'\n\nimport {MongoClient, ObjectId} from 'mongodb'\nconst MONGO_URL = 'mongodb://localhost:27017/insuranceadmin'\nexport const mongo = MongoClient.connect(MONGO_URL )\n\n//Dummy data\nconst Products = [{\n  productId: 124545897,\n  productName: 'life insurance',\n  coverAmount: 50.000,\n  monthlyPremium: 215.00\n},\n{\n  productId: 124545897,\n  productName: 'car insurance',\n  coverAmount: 50.000,\n  monthlyPremium: 215.00\n}]\nconst Policies = [{\n  policyId: 3421578989,\n  policyNumber: 1020,\n  contactNo: '0211024555',\n  startDate: '2017-06-02T09:40:15.090'\n},\n{policyId: 123456778,\npolicyNumber: 1030,\ncontactNo: '011100020000',\nstartDate: '20/05/2015'\n}]\n\n// graphql types\nconst policyType = new GraphQLObjectType({\n  name: 'policy',\n  fields: function(){\n    return {\n      policyId: {\n        type: GraphQLID\n      },\n      policyNumber:{\n        type: GraphQLInt\n      },\n      contactNo: {\n        type: GraphQLString\n      },\n      startDate:{\n        type: GraphQLString\n      }\n    }\n  }\n})\n\nconst productType = new GraphQLObjectType({\n  name: 'product',\n  fields: function(){\n    return {\n      productId: {\n        type: GraphQLID\n      },\n      productName :{\n        type:GraphQLString\n      },\n      coverAmount: {\n        type: GraphQLFloat\n      },\n      monthlyPremium: {\n        type: GraphQLFloat\n      },\n      policies: {\n        type: new GraphQLList(policyType),\n        resolve: function () {\n          return Policies;\n        }\n      }\n    }\n  }\n})\n\n\nconst getProducts = {\n  type: new GraphQLList(productType),\n  resolve: function () {\n    return Products;\n  }\n}\nconst addProduct = {\n  type: productType,\n  description: 'Add a new product',\n  args: {\n    productName: {\n      name: 'Product name',\n      type: new GraphQLNonNull(GraphQLString)\n    },\n    coverAmount: {\n      name: 'Cover Amount',\n      type: new GraphQLNonNull(GraphQLFloat)\n    },\n    monthlyPremium: {\n      name: 'Monthly Premium',\n      type: new GraphQLNonNull(GraphQLFloat)\n    },\n    policies: {\n      name: 'Policies',\n      type: new GraphQLNonNull(GraphQLString)\n    }\n  },\nresolve: (root,args) => {\n  const newProduct = new PRODUCT({\n    productName: 'Disability cover',\n    coverAmount: 20000,\n    monthlyPremium: 1000,\n    policies: [{\n      policyId: 3421578989,\n      policyNumber: 1020,\n      contactNo: '0211024555',\n      startDate: '2017-06-02T09:40:15.090Z'\n    },\n    {policyId: 123456778,\n    policyNumber: 1030,\n    contactNo: '011100020000',\n    startDate: '20/05/2015'\n    }\n  ]\n})\nProducts.push(newProduct);\n  }\n}\n\nconst QueryType = new GraphQLObjectType({\n  name: 'Query',\n  description: 'contains all queries',\n  fields:{\n    products: getProducts,\n  }\n})\nconst MutationType = new GraphQLObjectType({\n  name: 'Mutation',\n  description: 'contains all mutations',\n  fields: {\n    add: addProduct\n  }\n});\nmodule.exports = new GraphQLSchema({\n  query: QueryType,\n  mutation: MutationType\n})\n"]}